/*
 *  Problem: https://leetcode.com/problems/repeated-dna-sequences/
 *  Compile: g++ -o findRepeatedDnaSequences findRepeatedDnaSequences.cpp -std=c++11 && ./findRepeatedDnaSequences
 *  Execute: ./findRepeatedDnaSequences
 *  (c) Mohammad Hasanzadeh Mofrad, 2019
 *  (e) m.hasanzadeh.mofrad@gmail.com
 */

#include <iostream>
#include <stdint.h>
#include <stdio.h>
#include <vector>
#include <stdlib.h>
#include <utility>
#include <algorithm>
#include <string.h>


std::string s = "CCTATTTAAGGGAATCGCGGTCAACTATGTTGCCAGAATATAGGATGGAAAGCAGACTCGCCGGCAGACGCTCTGAGATTCTCTGTAATCGATCTGAGTTCATAAGCGACTCATAGACACCGTAGGCCATGACGGGGGAGGTGCGGGTAGTCGCAAAAAAAATGTGGCCTGCGTTCCGAAAGTTAATCGTAAGGACCTCTTAAGGTCAATTTCCGTAGTGATATAACGGACGCGACTTTAGGATACTATATTGCCCCACATTAACTCCCTTCCCTCTGCAATCGGCATGTGCTCCCGAGGTATACTGTCTTCGGAACAAACTGAATCCATACACCTCTTATCGACCCAGCACCTCCGAAAAGGAAATCGACGCCCCAACATTATACGCCTAGACAATTGCAACATAGAGCGAGACGTAGCGATCCAAACGAGCTAACAGCTCGAGATAACGAGTGCCTACGGCGATCGATGTCAAACGTCCAAGTGCATACTCGCTAGGACATTGGCTCATCAGGACTCAACTTAGTAGCTGATGCTGCTAGTTTAACGTCTTGTAATCAATATAGAGCATTGCACGGACACCAGCGCTCAACCTGGAGATGCCTTGTCTCGGAAAAACTGCATTCTGTAATAACCACGGGGTGCCACATTCCGGAACCGGGATCCGTCAAGCATGCCTTTCCGATTCATCGCGGGGTACCTCTGGCTTCCTTGAACCTGGGTGGGTATAAAATAACCGGTTTTAAGTGGCTCGACAGAGCGGGAAGCAGGCGCTATCATCAGGTTTTTACGGATTTATAGAGACCTCTTGTGCAGCAATACCTCTTTAATCCAATGTGGGCGCCCCCTTCATAGGGTCACGTCAGCATGATTCGTCGGGCCGAGGGACATGACTGACGACCGTTGGCAATACCCCGACCTCTAAAATTGTCCAACAGTGTGGTAGGTTATCCTGGTGACGCGGTATGACGGTCGATGCGAGCGTGTAGAAAGATGACGAGAGAGTCATCTCACAACATTGCGTGCTGTTTGGATCATACACCCCTGTGGAGGGCTTACCAGAAAGTGGACGCAGAAAGCCACCAAAAGTGTCATGCCAGATACCTGGCCTCCTTCGCCGCCGCGACTGAAGACCTTCCTTTAATTCCGTTATCCTACTTACGACCGAGAGTCAGATCTGTCAGTAAAGATCGGTCTGTTGCTTTCCACGGACTGTGAAGAATCCGCTGTTCTAACCAGCCAGCCCATTATACGGATCGATTTTGAAGTAACCTAGTAGGCGAATCAGCGGCCGGGCCTGATGCTAGACTCCCTAGACAATTTCCTCTCCACGGAAGGTTCCTAATCCCTGGGAATTTGGCTTATACGGGCCTTGGACACTGTTAAACTTCAGAGTGATAATTTAATGGCGAAGCTCTACGCCAGCGACCGCCGAAGCTCGCACCTTTAGCCCCCCTGAGTGAAGAACACTCGGGAATCTGCTCTCCTTGCAACCAAGCAACGGCGGGGTAGATATGGTGGGTTTCATGACGGCCCGGGAAGCTCTGGTCATAGCAATACTTGGGTAGCTGTGATGAGGGTCCAAAACTTTTTGGGCCAAGGTTCGGACGACACCGTCCGATCGACTGCCTAACTACCTGTTCACCCCATCGATAGAGTACAGTCGAGGCCCCGCCCGACCCATACGTCAAGACAGTGACAATAGGTGCTTACGAGTTTCTATAATAAATTGTCGGGACGATGTCTGCCCGCCTACCTGAGTGCGTGCCCGATATGGGGCTTGCGGAAAACTATGAAATATTAGTATTGCCCGGGGGACTCAGTCGAGTATTTGTGGAGACTCCCATTGCACTACTACAGCACCATATTAAGCTTACTCAGATACGTTAGAACAATAGGGGATCCACTTAAAACATTACAGATCCCAATCGGTCTCCTTGTTAAGGAAAAGCGTTAACAGGTGTGGTGGCAGTTATATTTGTAATAGACTTATAATAGGGTATTCCAAGTTTATTGTGGATAACGTCTCAAACCTGTTCCACACCACGAGTGTGGGCAATGAGATCCTATTGGCACGTCGTTATAGTCTCAGTGCCTGAAGACACCTGAAAGCAGGCGCTGTGACGTGTACCCAGTGCCCTCTGCAACCGGGAACTAGGGTTACAGAGGGGAAACAAAAATGATCGCACGCTTTAATCCAATACCGTTTCCCGTCTCCCAAGGTGAGACACTCCGGGGTATAAGTCCAGCCTCTTGTACGGTCACGATTAGGCGAAAATCTACTGTCTACCTTCGGTGTGCATTGTCTTAGCGTCTTATCCAGAGAGGAATGGCTTTCGTCGTCGTCGCTAGTTTCGCTCGCTTGAGGTATAGTTAATAGCAAGACTACGAGTCCACTGCTTCATGTCTAATTCATCGGCAGCCCTGTTTGGATTGGAGCGTAGCTAGGACCCCCGAACCAGCCTTAACTATGAACGTTTGTCTTCAAATCTGGGCGCACGTACTTCGTAGGCTGGATATGCAGAATCTCGCCGTCGTGACGACGATCCGTTGTAGACGGCACAGCGTCTCTGACCGGCTTGAACTAATGCTGACAATTCTGACATAAGGTCTACGCATCCAGAAAGTGTAATGCATGTATGTATGCAGCCAAACGATAGTAGAGCCCTATCTCGCTTGAGAGGCACTTCCCTGTATGCAAATACCGATGTTTCTCCGCTTCATGTACTAAAACCCTGTGACCGACTAGTTGCACCTACGATTGTATGACACGACGGCCTTAGAGGCAGCAACGCGTGGTAGGCCGTTATGCGAGGAATTCTACTACAGTCGGGAGCCGCAGCGGAAGCAATTTTTTTACTCACGTTCCAGCATGCTGCAAACGGAAGCTGACACGGAGTCAATCGGGTAAATTTTGAGCAAATAAATCGCGACAACTAGTCCCGACTACGCTTTCGACACTGTCCGGCAGATTCCGTGCATCAATTAAACGTCATCAATCAATTACTGGCACGACTGTAGACGGGTGTACTCTTTTATAGACTCAGCAGTAGGACCTATGTGGAGCGGTCTACACATTGACGCAAGACACAAGAACTAGCGCGGATTGTTTGATTCGGTGACCTCTGAGGGTCGCTAAGCGACACCACAATGCGTTAGTGCTAACGTAAGAGAGCTCGATTGCTATATAGATGTCGGTATTCTTCAATGCATTTGCTTACTAGCAGCGTCGGATACTCTTGGCCGGGACCTTCTTATTAGTCAATTACAGAAACAGTTGAAAGCCCCACCAGTTGCATATACTACTGCCTCCATTGTTGATGACCTCAACTTGCCTACCAGGATTGGAGCACCGATGTTATTTCCTCCGAGGTATAACCGAGCGTCATAACTTGGATGTATCCAGACTCGCTTATCCCCTCGCTGAGCATATCCTAGTCTGGATGACTTCAGAGAGCCTTTCTGGTCCGTAATATCCCAGTAGACTGGAGTTGTAGCAAATCGACCCTTGGGTGACTGCCTCACCCTGAAGTGATGTCTCTTCTTTACCATGCAGGCACTGGTCTAGCCGCCGAGTATCTTCTGATCCTTCTAAGGGCTTATTCGAAACAGCTTAACAAATGACAGGCTGTGATGATATATTACGTTGACGCTACGGGGACAGCGCCTATGTCGGCCACTAGGGCTTCATCCGTTACTCAGGGTCAAATGGGGATTTCATATTGCGGGATCGATTGAAGATAGCATCACACGTCTCCCAAGATACGTCCCACTTTGGTTTTGGTCACTCCTTATTCCGCGACGGTAGTCCCGCGCTGTTGCAAACTCGTTTGAAGACGCCTAGTCAAGATTCACTTCGCGGATCCGGCATCTTCGAATGGTTGGGATCCAGACGAGCGTGGGCGTACTGCTTACGAGAACGACTCGGCAGTGTTAGAGTGTTATCTGAAGGAGATGCTAGTAACATAATATACAAATCTTTATGTTAGTAGACTGCACAAGTCAATATGGATACATAGGTCCATGGAAGAATGTTCACGCGTTACTTGTGTCTCGCCACGCGAGTGCATCTCCATAGAGCCTTCCTGTATCGTCACTTTCTCTCGATGGTCAGCGTTTCAATAATTCGCGAGCAACAACGTCGATCTCCGGGATATACGATCAGCCCAGAGTACAAGACCCGATATGCACGGCATGCAATATCCAGAGTCGGGCATACTTTATTGGACTGGTAAGTCTCTCCTGTCCACGCTGACTACAACTGAAGTAGTGTGACCTGACTGGCGCCTTCTACCACCCATGTCTCCAGCAATTGTCGCATCATACAGGTTCCCAGCGTAGCGTCGCCCCTTTGGCGCTTTCCTGCGGTATCGATATAATGAAATTTTCACCAACGTTGCGCTTATTCGCAAGGTGGCGAGATTGTATTATGCCACACAGCCTCCTAGAATATCCTAAGGCAGAGTTCGGTGACTTTTGCCGCTTTAGGCAGGACAGAGCTGTCCTTATCTTGGGACAGCACGTGCTTCGATATACTGCCCGCGCTTTCTCTGGGGACGCTTTAAGGTCTTTTTGCTGCGATTGCGCTATCCGAGCCACTGTATCTTATACCGACGTATCTCGGCCTCGTTACATAGAAAATACTGTCAGCGCTTGTAGCGAGACCACGCGATAGTGACCGGAGTTGGTTCCTCCGTCCTTTTTGTATTCCCCGTTGCGACTGATTCACGTGACCACATAGTCATAAGACACTGAAACAAAGCTTACTTTGGCGAGTAGGATGTGTTAATAACTTCTGGCAGCACATAGAATTGGTCCGTGGTCCTCCTTTGCGGCCACTACTGAACGTACCAATGAGTACGTATTGACCTCTTACTGAGTGTAGTAAGGGAGCATCAATCGGTCTCCGGGTTTTTGATTCATGAGTCATGCATCAGTGGTTCATCCCTTGCGTGTTATTCTCTTGATACGGTTGACTAAGCAATGAGTTAGTCGAGCTA";


std::vector<std::string> tokenize(std::string s){
    std::string seq;
    std::vector<std::string> sequences;
    int i = 0;
    int n = s.size();
    char* current_char = nullptr;
    char* lookahead_char = nullptr;
    char* lookbehind_char = nullptr;
    while(i < n) {
        current_char = &s[i];
        lookahead_char = nullptr;
        if(i+1 < n) {
            lookahead_char = &s[i+1];
            if(*current_char == *lookahead_char) {
                //seq.append(c1);
                //seq.append(c2);
                //printf("1. %d: %c %c\n", i, *current_char, *lookahead_char);  
                seq += *current_char;
                //seq += *c2;
                //i++;
                lookbehind_char = current_char;
            }
            else {
                //printf("2. %d: %c \n", i, *current_char);  
                //seq.append(c1);
                seq += *current_char;
                //printf("%d: seq=%s\n", i, seq.c_str());    
                sequences.push_back(seq);
                seq.clear();
                
                lookbehind_char = current_char;
            }
           // printf("%d: %c %c\n", i, *c1, *c2);    
        }
        else {
            //printf("last char %c\n", *current_char);
            if(*lookbehind_char != *current_char) {
                seq.clear();
            }
            seq += *current_char;
            sequences.push_back(seq);
            seq.clear();
        }   
        i++;
    }
    
    
    
    return(sequences);
}


std::vector<std::string> findRepeatedDnaSequences(std::string s) {
    std::vector<std::string> sequences = tokenize(s);
    std::vector<std::string> out;
    /*
    int n = s.size();
    int i = 0;
    int j = 0;
    std::string str;
    while(i <= (n - 10)) {
        str = s.substr(i,10); 
        j = i + 1;
        while(j <= (n - 10)) { 
            std::string str1 = s.substr(j,10);
            if(str == str1) {
                printf("%s %s\n", str1.c_str(), str1.c_str());
                if(std::find(out.begin(), out.end(), str) == out.end())
                    out.push_back(str);
                break;
            }
            str1.clear();
            j++;
        }
        str.clear();
        i++;    
    }
    */
    
    int n = s.size();
    int i = 0;
    int j = 1;
    std::string stri;
    std::string strj;
    while(i <= (n - 10)) {
     //   printf("%d %d %d\n", i, j, n);
        stri = s.substr(i,10); 
        strj = s.substr(j,10);
        if((stri == strj) and (std::find(out.begin(), out.end(), stri) == out.end())) {
            out.push_back(stri);
            i++;
            j = i + 1;
        }
        else if(j <= (n - 10)) {
            j++;
        }
        else {
            i++;
            j = i + 1;
        }            
    }
    
    
    
    
    
    return(out);    
}

int main(int argc, char **argv){
    //std::string s = "AAAAAAAAAAAA";
    //std::string s = "AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT";
    printf("%s\n", s.c_str());

    
    std::vector<std::string> ss = findRepeatedDnaSequences(s);
    for(auto sss: ss) {
        printf("<%s>\n", sss.c_str());
    }        
    return(0);
}